内容
es6 常量、作用域、箭头函数、默认参数、对象代理

环境准备
安装
windows
1. 安装git
2. 执行git clone https://github.com/cucygh/es6-webpack.github
3. cd es6-webpack && npm install(先要在windows安装node)
4. npm i webpack -g 全局安装 npm i webpack-dev-server -g
5. 启动项目npm start

es6,全程ECMAScript6.0,是JavaScript的下一个版本标准,2015.06发布.主要是
为了解决ES5先天不足，比如JavaScript里并没有类的概念，但是目前浏览器的JS是ES5
版本，大多数版本浏览器也支持ES6，不过只实现了ES6的部分特性和功能

webpack是一个现代JS应用程序的静态模块打包器(module bundler).当webpack处理应用
程序时，它会递归地构建一个依赖关系图(dependency graph),其中包含应用程序需要的每个
模块，然后将所有这些模块打包成一个或多个bundle.
webpack主要有四个核心概念:
入口(entry) 输出(output) loader 插件(plugins)


常量 
    ES6新增加了两个重要的js关键字:let和const
    let声明的变量只在let命令所在的代码块内有效(let不能重复声明,而var可以)
    在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。
    var声明的变量由于不存在块级作用域所以可以在全局环境中调用
    const声明一个只读的变量，一旦声明，常量的值就不能改变(一旦声明必须初始化)


js立即执行函数
立即执行函数常用于第三方库，好处在隔离作用域，任何一个第三方库都会存在大量的
变量和函数，为了避免变量污染(命名冲突).
(function(){...})()和(function(){...}())是等价的

通过定义一个匿名函数，创建了一个新的函数作用域，该名命空间
的变量和方法不会破坏污染全局的命名空间。此时若是想访问全局对象，
将全局对象以参数形式传递进去.
(function(window, undefined) {
    //jquery code
})(window);


闭包:　
    闭包是有权访问另一个函数作用域中的变量的函数。首先要明白的就是，闭包是函数。由于要求它可以访
问另一个函数的作用于中的变量，所以我们往往是在一个函数的内部创建另一个函数，而“另一个函数”就是闭包。

在es6没出来之前，js的作用域只有两种顶层作用域和函数作用域，但是es6的出现，让js
的变量作用域有了新的存在形式: 块级作用域


引入块级作用于有很多好处，解决了之前for循环定义的变量造成全局污染的问题，而且不必
再使用闭包来保存必要的变量,因为各个代码块的变量相互独立，不会造成全局变量的污染
// ES5 中作用域
const callbacks = []
for (var i = 0; i <= 2; i++) {
    callbacks[i] = function() {
        return i * 2
    }
}

console.table([
    callbacks[0](),
    callbacks[1](),
    callbacks[2](),
])

const callbacks2 = []
for (let j = 0; j <= 2; j++) {
    callbacks2[j] = function() {
        return j * 2
    }
}


箭头函数
箭头函数提供了一种更加简洁的函数书写方式.
参数 => 函数体
当箭头函数没有参数或者有多个参数，要用()括起来
eg:
var f = (a,b) => a + b;
f(6, 2);//8
当箭头函数函数体有多行代码，用{}包裹起来，表示代码块，当只有
一行语句，并且需要返回结果时，可以省略{},结果会自动返回.
当箭头函数要返回对象的时候，为了区分于代码，要用()将对象包裹起来
// 报错
var f = (id,name) => {id: id, name: name};
f(6,2);  // SyntaxError: Unexpected token :
 
// 不报错
var f = (id,name) => ({id: id, name: name});
f(6,2);  // {id: 6, name: 2}

箭头函数没有this,super,arguments和new.target绑定
var func = () => {
  // 箭头函数里面没有 this 对象，
  // 此时的 this 是外层的 this 对象，即 Window 
  console.log(this)
}
func(55)  // Window 
 
var func = () => {    
  console.log(arguments)
}
func(55);  // ReferenceError: arguments is not defined
箭头函数没有自己的this,它的this是继承而来;默认指向在定义它时所处的对象(
宿主对象)，而不是执行时的对象。定义它的时候，可能环境是window;箭头函数可以方便
地让我们在setTimeout,setInterval中方便的使用this(解决this执行不明确问题)
eg:
{
  // ES3,ES5
  var factory = function() {
    this.a = 'a';
    this.b = 'b';
    this.c = {
      a: 'a+',
      b: function() {
        return this.a
      }
    }
  }

  console.log(new factory().c.b());// a+
};

{
  var factory = function() {
    this.a = 'a';
    this.b = 'b';
    this.c = {
      a: 'a+',
      b: () => {
        return this.a
      }
    }
  }
  console.log(new factory().c.b());//a
}


默认参数
使用函数默认参数时，不允许有同名参数
// 不报错
function fn(name,name){
 console.log(name);
}
 
// 报错
//SyntaxError: Duplicate parameter name not allowed in this context
function fn(name,name,age=17){
 console.log(name+","+age);
}

只有在未传递参数，或者参数为undefined时，参会使用默认参数,null值被认为是有效的值传递
function fn(name,age=17){
    console.log(name+","+age);
}
fn("Amy",null); // Amy,null

不定参数
不定参数用来表示不确定参数个数，形如,...变量名，由...加上一个具有参数标识符组成.具体
参数只能放在参数组的最后，并且有且只有一个不定参数
function f(...values){
    console.log(values.length);
}
f(1,2);      //2
f(1,2,3,4);  //4



对象代理
Proxy可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不
直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时
，可以添加一些需要的额外操作.
一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数
生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。